<div class="properties-index">
  <div class="col-md-6">
    <div id="suggestions">
    <%= form_tag(properties_path, :method => "get", id: "search-form") do %>
    <%= text_field_tag :search, params[:search], placeholder: "Enter address or property type", :class => "form-control typeahead" %>
    <span><%= submit_tag "Search", :name => nil, :class => "btn" %></span>
    </div>
    <% end %>
    <br>

    <div class="btn-group sortButton">
      <button type="button" class="btn btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sort by: &nbsp; <span class="caret"></span>
      </button>
      <ul class="dropdown-menu">
        <li><a href="#" class = "lowPrice">Lowest Price</a></li>
        <li><a href="#" class = "highPrice">Highest Price</a></li>
        <li><a href="#" class = "recency">Recency</a></li>
        <li><a href="#" class = "popularity">Popularity</a></li>
      </ul>
    </div>
    <br>
    <h2 style="margin-top:10px">Listings Found: </h2>
    <div class="propPanel "style="overflow-y: scroll; height:540px;">
      <% if @properties.blank? %>
      <h4>No matched property of name <%= params[:search] %>.</h4>
      <% end %>
      <%@properties.each do |prop|%>
        <div class="row sortProps" style="margin-bottom: 25px;">
          <div class="col-md-5">
            <%= cl_image_tag(prop.photo_url, :width => 250, :height => 170, :alt => "Property Pic") %>
          </div>
          <div class="col-md-4">
            <p style="font-weight:bold;">
              <%= link_to prop.address,property_path(id: prop.id)%>
            </p>
            <p class="propAddr" style="display:none;"><%=prop.address%></p>
            <p>S<%=prop.postcode%></p>
            <p><%=prop.property_type%>, <%=prop.rent_area%></p>
            <p><i>Listed at: <span><%=prop.updated_at.to_s[0..18]%></span></i></p>
          </div>
          <div class="col-md-3">
            <p><b>$<span class="propPrice"><%=prop.price%></span> /month</b></p>
            <p>Interests: <span class="propPop"><%=prop.shortlists.length%></span></p>
            <p style="display:none;"class="propTime">
              <%=Time.zone.parse(prop.updated_at.to_s).to_i%>
            <p>
            <p style="display:none;"class="propLat">
              <%=prop.latitude%>
            <p>
            <p style="display:none;"class="propLng">
              <%=prop.longitude%>
            <p>
          </div>
        </div>
      <%end%>
    </div>
  </div>
  <div class="col-md-6">
    <div id="map" style="height:680px;width:100%;"></div>
  </div>
<script>

  function initMap() {
    var map;
    var markerArray = []
    var disableShowHide = false;

    if(<%= @center_map %>){
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 11,
        center: {lat: 1.3046,lng: 103.8319}
        // center: {lat: 1.384323,lng: 103.826093}
      });
    }
    else{
      console.log(<%= @center_map %>)
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 16,
        center: {lat: <%=@geocode[0][0]%>,lng: <%=@geocode[0][1]%>}
      });
    }
    var prev_infowindow =false;

      if(!<%=@properties.empty?%>){
        <%=@geocode.to_json.html_safe%>.forEach(function(arr){

      var marker = new google.maps.Marker({
        position: {lat:arr[0],lng:arr[1]},
        map: map
      })

      var propPos = new google.maps.LatLng(arr[0], arr[1]);//GOOGLE PLACES
      var service = new google.maps.places.PlacesService(map); //GOOGLE PLACES

      var request = {  //GOOGLE PLACES
        location: propPos,
        radius: '1000',
        type: "subway_station"
      };

      var nearbyStation; //GOOGLE PLACES
      var infoWindowContent //
      var infowindow

      function googleCb (result,status){
        if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
        }
        console.log("Nearby Search result is: " + result[0].name)
        nearbyStation = result[0].name

        infoWindowContent = "<p>Address: " + arr[2] + "<br> "+ "Nearest MRT: " + nearbyStation + "</p>"

        infowindow = new google.maps.InfoWindow({
          content: infoWindowContent
        });

        markerArray.push([marker,arr[2],infowindow])

        infowindow.addListener('closeclick', function() {
          var $otherDiv = $('div p:contains('+arr[2]+')').parent('div').parent('div').siblings()
          $otherDiv.show()
          console.log('closing infowindow ' )
          // closeWindow = true
        })
      }

      service.nearbySearch(request,googleCb)

      marker.addListener('click', function() {
        if(prev_infowindow) {
             prev_infowindow.close();
          }
        prev_infowindow = infowindow
        // closeWindow = false
        infowindow.open(map, this)
        var $highlightedDiv = $('div p:contains('+arr[2]+')').parent('div').parent('div')
        var $otherDiv = $('div p:contains('+arr[2]+')').parent('div').parent('div').siblings()
        if(!disableShowHide){
          $otherDiv.hide()
          $highlightedDiv.show()
        }
      })

      })
    }

    function centrePin () {

      var $propLatitude = parseFloat($(this).find('.propLat').text())
      var $propLongitude = parseFloat($(this).find('.propLng').text())

      if(!isNaN($propLatitude) && !isNaN($propLongitude)){
        map.panTo(new google.maps.LatLng($propLatitude, $propLongitude))
        var $propAddress = $(this).find('.propAddr').text()
        var relatedMarker = markerArray.find(function(elm){return elm.includes($propAddress)})[0]
        disableShowHide = true
        google.maps.event.trigger(relatedMarker, 'click');
      }
    }

    function originalPan(){

      var $propAddress = $(this).find('.propAddr').text()

      var relatedInfoWindow = markerArray.find(function(elm){
        return elm.includes($propAddress)
      })[2]

      disableShowHide = false
      console.log(relatedInfoWindow)
      google.maps.event.trigger(relatedInfoWindow, 'closeclick')
      console.log("closing original pan!")
    }

    $(document).on('mouseenter', '.sortProps', {}, centrePin)
    $(document).on('mouseleave', '.sortProps', {}, originalPan)

  }
  var substringMatcher = function(strs) {
    return function findMatches(q, cb) {
      var matches, substringRegex;
      matches = [];

      substrRegex = new RegExp(q, 'i');

      $.each(strs, function(i, str) {
        if (substrRegex.test(str)) {
          matches.push(str);
        }
      });

      cb(matches);
    };
  };

  $('#suggestions .typeahead').typeahead({
    hint: true,
    highlight: true,
    minLength: 1
  },
  {
    name: 'all_properties',
    source: substringMatcher(<%=@all_properties.to_json.html_safe%>)
  });

</script>
<script async defer
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyClU-x_i5Nq9B1Q1qRuSJ0_0nKLdf41q8g&libraries=places&callback=initMap">
</script>
